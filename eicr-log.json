<!DOCTYPE html>
<html lang="en">
<head>
  <script src="auth.js"></script>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Retail Compliance Portal</title>
  <style>
    /* ====== Mostlane Base Styling ====== */
    body{
      margin:0;
      font-family: Arial, sans-serif;
      color:#1f2937;
      background-color:#e6e8eb;
      background-image:url('Mostlane_Embossed.png');
      background-repeat:no-repeat;
      background-attachment:fixed;     /* fixed background */
      background-position:center;
      background-size:180%;            /* your standard */
    }
    .container{
      background-color:rgba(255,255,255,0.6);
      margin:20px auto;
      padding:20px;
      border-radius:15px;
      max-width:95%;
      box-shadow:0 4px 10px rgba(0,0,0,0.1);
    }
    h1{
      text-align:center;
      color:#0071CE;
      margin-top:0;
    }
    .logo{
      display:block;
      margin:10px auto 20px auto;
      max-height:60px;
    }
    .summary-bubbles,.filter-bubbles{
      display:flex;flex-wrap:wrap;justify-content:center;margin-bottom:20px;
    }
    .bubble{
      background-color:#0071CE;color:#fff;border:none;
      padding:10px 20px;margin:5px;border-radius:30px;
      cursor:pointer;font-weight:bold;transition:opacity .2s;
    }
    .bubble:hover{opacity:.85}
    .bubble.active{background-color:#28a745}

    .search-container{text-align:center;margin-bottom:10px}
    .search-input{
      padding:8px;width:300px;border-radius:20px;border:1px solid #ccc;
    }

    .table-wrapper{overflow-x:auto;width:100%}
    table{width:100%;border-collapse:collapse;margin-top:20px}
    th,td{border:1px solid #999;padding:8px;text-align:center;font-size:14px}
    th{background-color:#0071CE;color:#fff}
    tr:nth-child(even){background-color:rgba(255,255,255,0.7)}
    tr:nth-child(odd){background-color:rgba(255,255,255,0.5)}

    @media (max-width:768px){
      .search-input{width:90%;font-size:16px}
      th,td{font-size:12px;padding:6px}
    }
  </style>
</head>
<body>
  <div class="container">
    <img src="mostlane-logo.jpg" alt="Mostlane Logo" class="logo">
    <h1>Mostlane Retail Compliance Portal</h1>

    <div class="summary-bubbles">
      <button class="bubble" onclick="setDueActive(this);filterByDays(30)">Due in 30 Days</button>
      <button class="bubble" onclick="setDueActive(this);filterByDays(90)">Due in 90 Days</button>
      <button class="bubble" onclick="setDueActive(this);filterByDays(365)">Due in 365 Days</button>
      <button class="bubble" onclick="clearFilters()">Clear</button>
    </div>

    <div class="filter-bubbles">
      <button class="bubble" onclick="setCategory('fiveYear', this)">5 Year</button>
      <button class="bubble" onclick="setCategory('pat', this)">PAT</button>
      <button class="bubble" onclick="setCategory('em', this)">EM</button>
      <button class="bubble" onclick="setCategory('pv', this)">PV</button>
      <button class="bubble" onclick="setCategory('ev', this)">EV</button>
      <button class="bubble" onclick="setCategory('pump', this)">Pump Maintenance</button>
    </div>

    <div class="search-container">
      <input class="search-input" type="text" id="searchBar"
             placeholder="Search store name, number or postcode..."
             onkeyup="searchTable()">
    </div>

    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Store Code</th>
            <th>Site Name</th>
            <th>Postcode</th>
            <th>Status</th>
            <th>Report</th>
            <th>5 Year</th>
            <th>PAT</th>
            <th>EM</th>
            <th>PV</th>
            <th>EV</th>
            <th>Pump</th>
          </tr>
        </thead>
        <tbody id="tableBody"></tbody>
      </table>
    </div>
  </div>

  <script>
    let allData = [];
    let activeCategory = 'fiveYear';
    const filterBubbles = document.querySelectorAll(".filter-bubbles .bubble");
    const dueButtons = document.querySelectorAll(".summary-bubbles .bubble");

    // --- Robust date parsing: supports "YYYY-MM-DD" and "DD/MM/YYYY"; returns null if blank/invalid
    function parseDate(d){
      if(!d || typeof d !== 'string') return null;
      const s = d.trim();
      if(!s || s === '""') return null;
      // ignore 1990 placeholders like 01/01/1990 or 1990-01-01
      if (s.includes('1990')) return null;

      // ISO first
      const iso = new Date(s);
      if(!isNaN(iso)) return iso;

      // DD/MM/YYYY fallback
      const m = s.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
      if(m){
        const dd = parseInt(m[1],10), mm = parseInt(m[2],10)-1, yy = parseInt(m[3],10);
        const dt = new Date(yy, mm, dd);
        if(!isNaN(dt)) return dt;
      }
      return null;
    }

    function formatCell(d){
      return d || '';
    }

    function statusEmoji(entry){
      const now = new Date();
      const arr = [entry.fiveYear, entry.pat, entry.em, entry.pv, entry.ev, entry.pump]
        .map(parseDate)
        .filter(Boolean);

      let red = false, amber = false;
      arr.forEach(dt=>{
        if(dt < now) red = true;
        else {
          const days = (dt - now)/(1000*60*60*24);
          if(days <= 30) amber = true;
        }
      });
      return red ? 'ðŸ”´' : amber ? 'ðŸŸ¡' : 'ðŸŸ¢';
    }

    async function fetchData(){
      try{
        const res = await fetch('https://raw.githubusercontent.com/Mostlane/Test/main/Compliance/retail_compliance.json', {cache:'no-store'});
        const raw = await res.json();

        // If your JSON is nested like { "sites": [ ... ] }, uncomment:
        // const rows = raw.sites || raw;
        const rows = raw;

        // Map Excel-style headers to our expected keys without forcing you to change your JSON
        allData = rows.map(r => ({
          storeCode: r.storeCode || r["Store Code"] || r["Code"] || r["Store"] || "",
          siteName:  r.siteName  || r["Site Name"]  || r["Store Name"] || "",
          postcode:  r.postcode  || r["Postcode"]  || r["Post Code"]  || "",
          fiveYear:  r.fiveYear  || r["5 Year"]    || r["fiveYrDueDate"] || "",
          pat:       r.pat       || r["PAT"]       || r["patDueDate"]    || "",
          em:        r.em        || r["EM"]        || r["emDueDate"]     || "",
          pv:        r.pv        || r["PV"]        || r["pvDueDate"]     || "",
          ev:        r.ev        || r["EV"]        || r["evDueDate"]     || "",
          pump:      r.pump      || r["PUMP"]      || r["pumpDueDate"]   || r["forecourtDueDate"] || "",
          reportURL: r.reportURL || r["Report"]    || r["report"]        || ""
        }));

        renderTable(allData);
      }catch(err){
        console.error('Error loading data:', err);
        document.getElementById('tableBody').innerHTML =
          `<tr><td colspan="11">Error loading data. Check JSON path/format.</td></tr>`;
      }
    }

    function renderTable(data){
      const tbody = document.getElementById('tableBody');
      tbody.innerHTML = '';
      data.forEach(entry=>{
        const tr = document.createElement('tr');
        const code = (entry.storeCode ?? '').toString().padStart(4,'0');
        tr.innerHTML = `
          <td>${code}</td>
          <td>${entry.siteName}</td>
          <td>${entry.postcode}</td>
          <td>${statusEmoji(entry)}</td>
          <td>${entry.reportURL ? `<a href="${entry.reportURL}" target="_blank" rel="noopener">View</a>` : ''}</td>
          <td>${formatCell(entry.fiveYear)}</td>
          <td>${formatCell(entry.pat)}</td>
          <td>${formatCell(entry.em)}</td>
          <td>${formatCell(entry.pv)}</td>
          <td>${formatCell(entry.ev)}</td>
          <td>${formatCell(entry.pump)}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    function filterByDays(days){
      const now = new Date();
      const future = new Date(now);
      future.setDate(now.getDate()+days);

      const filtered = allData.filter(entry=>{
        const d = parseDate(entry[activeCategory]);
        if(!d) return false;
        return d <= future;
      }).sort((a,b)=>{
        const da = parseDate(a[activeCategory]);
        const db = parseDate(b[activeCategory]);
        if(!da && !db) return 0;
        if(!da) return 1;
        if(!db) return -1;
        return da - db;
      });

      renderTable(filtered);
    }

    function clearFilters(){
      renderTable(allData);
      filterBubbles.forEach(b=>b.classList.remove('active'));
      dueButtons.forEach(b=>b.classList.remove('active'));
    }

    function setCategory(field, btn){
      activeCategory = field;
      filterBubbles.forEach(b=>b.classList.remove('active'));
      btn.classList.add('active');
    }

    function setDueActive(btn){
      dueButtons.forEach(b=>b.classList.remove('active'));
      btn.classList.add('active');
    }

    function searchTable(){
      const q = (document.getElementById('searchBar').value || '').toLowerCase();
      const filtered = allData.filter(e =>
        (e.siteName || '').toLowerCase().includes(q) ||
        (e.postcode || '').toLowerCase().includes(q) ||
        (e.storeCode ?? '').toString().includes(q)
      );
      renderTable(filtered);
    }

    fetchData();
  </script>
</body>
</html>
